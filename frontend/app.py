import streamlit as st
import requests
import os

API_URL = os.getenv("API_URL", "http://127.0.0.1:8000")


def start_interview(name, email, domain):
    res = requests.post(f"{API_URL}/start", json={
        "name": name,
        "email": email,
        "domain": domain
    })
    res.raise_for_status()
    return res.json()


def submit_answer(session_id, answer):
    res = requests.post(f"{API_URL}/answer", json={
        "session_id": session_id,
        "answer": answer
    })
    res.raise_for_status()
    return res.json()


def exit_interview(session_id):
    res = requests.post(f"{API_URL}/exit", json={
        "session_id": session_id,
        "answer": "exit"
    })
    res.raise_for_status()
    return res.json()


def clear_session_state():
    for key in ["session_id", "question", "score", "feedback", "question_number", "answer_input_key", "finished_results"]:
        if key in st.session_state:
            del st.session_state[key]


def main():
    st.set_page_config(page_title="Excel Mock Interviewer", layout="centered")
    st.title("Dynamic Excel Mock Interviewer")

    st.markdown("""
        Welcome to the Dynamic Excel Mock Interviewer platform!

        This app uses the **FastAPI** backend and **Streamlit** frontend to provide a realistic Excel interview experience.

        - You will receive domain-specific Excel questions generated by a Large Language Model.
        - Answers are evaluated in real-time with detailed scoring and feedback.
        - The difficulty dynamically adjusts based on your performance.
        - You can submit answers, skip questions, or exit anytime.
    """)

    if 'session_id' not in st.session_state:
        with st.form("registration_form"):
            name = st.text_input("Full Name")
            email = st.text_input("Email Address")
            domain = st.selectbox("Select Domain", ["Data Analysis", "Finance", "Operation"])
            start = st.form_submit_button("Start Interview")

            if start:
                if not name.strip() or not email.strip():
                    st.error("Please enter your full name and a valid email address.")
                else:
                    try:
                        result = start_interview(name.strip(), email.strip(), domain.lower())
                        st.session_state.session_id = result['session_id']
                        st.session_state.question = result['question']
                        st.session_state.question_number = result['question_number']
                        st.session_state.score = None
                        st.session_state.feedback = None
                        st.session_state.answer_input_key = 0
                        st.rerun()
                    except Exception as e:
                        st.error(f"Failed to start interview: {e}")
    else:
        if st.session_state.get("finished_results"):
            result = st.session_state.finished_results
            st.success("Interview finished!")
            st.markdown("### Final Results")
            st.markdown(f"- Questions Asked: {result['score_summary']['asked'] - 1}")
            st.markdown(f"- Correct Answers: {result['score_summary']['correct']}")
            st.markdown(f"- Wrong Answers: {result['score_summary']['wrong']}")
            st.markdown(f"- Final Score: {result['score_summary']['final_score_percent']}% ✅")

            st.markdown("### Question-wise Performance")
            for i, entry in enumerate(result.get("history", []), 1):
                st.markdown(f"**Q{i}: {entry['question']}**")
                st.markdown(f"- Your Answer: {entry['user_answer']}")
                st.markdown(f"- Correct Answer: {entry['correct_answer']}")
                st.markdown(f"- Score: {entry['score']:.2f}")
                st.markdown(f"- Feedback: {entry['explanation']}")
                st.markdown("---")

            if st.button("Next Candidate"):
                clear_session_state()
                st.rerun()

            return

        st.markdown(f"### Question {st.session_state.question_number}:")
        st.write(st.session_state.question)

        with st.form("answer_form"):
            key_value = st.session_state.get("answer_input_key", 0)
            answer = st.text_area("Your Answer", height=150, key=f"answer_input_{key_value}")
            col1, col2, col3 = st.columns(3)
            with col1:
                submit = st.form_submit_button("Submit Answer")
            with col2:
                skip = st.form_submit_button("Skip Question")
            with col3:
                exit_ = st.form_submit_button("Exit Interview")

        if submit:
            if not answer.strip():
                st.warning("Please enter your answer before submitting.")
            else:
                try:
                    result = submit_answer(st.session_state.session_id, answer.strip())
                    if result.get("finished"):
                        st.session_state.finished_results = result
                        st.rerun()
                    else:
                        st.session_state.score = result['score']
                        st.session_state.feedback = result['explanation']
                        st.session_state.question = result['next_question']
                        st.session_state.question_number = result['question_number']

                        # ✅ Clear the text area by updating the key
                        st.session_state.answer_input_key = key_value + 1

                        st.rerun()
                except Exception as e:
                    st.error(f"Failed to submit answer: {e}")

        if skip:
            try:
                result = submit_answer(st.session_state.session_id, "skip")
                if result.get("finished"):
                    st.session_state.finished_results = result
                    st.rerun()
                else:
                    st.session_state.question = result['next_question']
                    st.session_state.question_number = result['question_number']

                    # ✅ Clear the text area by updating the key
                    st.session_state.answer_input_key = key_value + 1

                    st.rerun()
            except Exception as e:
                st.error(f"Failed to skip question: {e}")

        if exit_:
            try:
                result = exit_interview(st.session_state.session_id)
                st.session_state.finished_results = result
                st.rerun()
            except Exception as e:
                st.error(f"Failed to exit interview: {e}")

        if st.session_state.get('score') is not None:
            st.markdown(f"### Last Answer Score: {st.session_state.score:.2f}")
            st.markdown(f"**Feedback:** {st.session_state.feedback}")


if __name__ == "__main__":
    main()
